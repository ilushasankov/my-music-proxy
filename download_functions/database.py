import aiosqlite
import json
import time
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent
DB_PATH = BASE_DIR / "music_bot.db"
CACHE_TTL = 7200  # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∫—ç—à–∞ –ø–æ–∏—Å–∫–∞ –∏ —Å—Å—ã–ª–æ–∫

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS user_downloads (
                user_id INTEGER,
                track_id TEXT,
                download_time INTEGER,
                title TEXT,
                artist TEXT,
                duration INTEGER
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS search_cache (
                query_hash TEXT PRIMARY KEY,
                results TEXT,
                timestamp INTEGER
            )
        ''')
        # –ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê: –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ SoundCloud
        await db.execute('''
            CREATE TABLE IF NOT EXISTS soundcloud_urls (
                url_hash TEXT PRIMARY KEY,
                full_url TEXT,
                timestamp INTEGER
            )
        ''')
        await db.commit()
    print("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def save_user_track(user_id: int, track_id: str, info: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ."""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'INSERT INTO user_downloads (user_id, track_id, download_time, title, artist, duration) VALUES (?, ?, ?, ?, ?, ?)',
            (
                user_id, track_id, int(time.time()),
                info.get('title'), info.get('artist'), info.get('duration')
            )
        )
        await db.commit()

async def get_user_daily_downloads(user_id: int) -> int:
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤, —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞."""
    twenty_four_hours_ago = int(time.time()) - 86400
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            'SELECT COUNT(*) FROM user_downloads WHERE user_id = ? AND download_time > ?',
            (user_id, twenty_four_hours_ago)
        ) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else 0

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—ç—à–∞ –ø–æ–∏—Å–∫–∞ ---

async def get_cached_search(query_hash: str) -> list | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –∫—ç—à–∞ –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏."""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            'SELECT results, timestamp FROM search_cache WHERE query_hash = ?',
            (query_hash,)
        ) as cursor:
            row = await cursor.fetchone()
            if row:
                results, timestamp = row
                if time.time() - timestamp < CACHE_TTL:
                    return json.loads(results)
                else:
                    await db.execute('DELETE FROM search_cache WHERE query_hash = ?', (query_hash,))
                    await db.commit()
    return None

async def save_search_to_cache(query_hash: str, results: list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à –ë–î."""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'INSERT OR REPLACE INTO search_cache (query_hash, results, timestamp) VALUES (?, ?, ?)',
            (query_hash, json.dumps(results), int(time.time()))
        )
        await db.commit()

async def cleanup_expired_cache():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞ –ø–æ–∏—Å–∫–∞ –≤ –ë–î."""
    cutoff_time = int(time.time()) - CACHE_TTL
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('DELETE FROM search_cache WHERE timestamp < ?', (cutoff_time,))
        await db.commit()
        if cursor.rowcount > 0:
            print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–∏—Å–∫–∞: —É–¥–∞–ª–µ–Ω–æ {cursor.rowcount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.")

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –¥–ª—è –∫—ç—à–∞ —Å—Å—ã–ª–æ–∫ SoundCloud ---

async def save_soundcloud_url(url_hash: str, full_url: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö—ç—à–∞ –∏ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏ SoundCloud –≤ –ë–î."""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'INSERT OR REPLACE INTO soundcloud_urls (url_hash, full_url, timestamp) VALUES (?, ?, ?)',
            (url_hash, full_url, int(time.time()))
        )
        await db.commit()

async def get_soundcloud_url(url_hash: str) -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É SoundCloud –ø–æ —Ö—ç—à—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞."""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            'SELECT full_url, timestamp FROM soundcloud_urls WHERE url_hash = ?',
            (url_hash,)
        ) as cursor:
            row = await cursor.fetchone()
            if row:
                full_url, timestamp = row
                if time.time() - timestamp < CACHE_TTL:
                    return full_url
                else:
                    # –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, —É–¥–∞–ª—è–µ–º –µ–µ
                    await db.execute('DELETE FROM soundcloud_urls WHERE url_hash = ?', (url_hash,))
                    await db.commit()
    return None

async def cleanup_expired_soundcloud_urls():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å—Å—ã–ª–æ–∫ SoundCloud –≤ –ë–î."""
    cutoff_time = int(time.time()) - CACHE_TTL
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('DELETE FROM soundcloud_urls WHERE timestamp < ?', (cutoff_time,))
        await db.commit()
        if cursor.rowcount > 0:
            print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ SoundCloud: —É–¥–∞–ª–µ–Ω–æ {cursor.rowcount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.")