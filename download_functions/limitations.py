import asyncio
import time
from typing import Tuple, Optional
import traceback
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramAPIError
from aiogram.types import BufferedInputFile, URLInputFile
from cachetools import TTLCache

from download_functions.database import get_user_daily_downloads, save_user_track, cleanup_expired_cache
from download_functions.yt_download import download_track_optimized, sanitize_filename
from download_functions.saavn_api import download_track_saavn
from download_functions.yandex_music_api import download_track_yandex

import base64
from download_functions.soundcloud_api import get_soundcloud_info 

import os

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
CHANNEL_ID_1 = os.getenv('CHANNEL_ID_1')
CHANNEL_ID_2 = os.getenv('CHANNEL_ID_2')

# --- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –õ–ò–ú–ò–¢–´ ---
BASE_DOWNLOAD_LIMIT = 5
PREMIUM_DOWNLOAD_LIMIT = 42
SEARCH_COOLDOWN = 8
DOWNLOAD_STATUS_UPDATE_INTERVAL = 12

# --- –õ–ò–ú–ò–¢–´ –ö–û–ù–¢–ï–ù–¢–ê ---
MAX_DURATION_SECONDS = 900  # 15 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º

FAST_QUEUE_MAX_SIZE = 200
SLOW_QUEUE_MAX_SIZE = 50

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: 0 - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π
PRIORITY_PREMIUM = 0
PRIORITY_NORMAL = 1

# –û—á–µ—Ä–µ–¥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á. –ò—Å–ø–æ–ª—å–∑—É–µ–º PriorityQueue.
# –≠–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –∫–æ—Ä—Ç–µ–∂–µ–º: (priority, timestamp, (call, source, track_id))
fast_queue = asyncio.PriorityQueue(maxsize=FAST_QUEUE_MAX_SIZE)
slow_queue = asyncio.PriorityQueue(maxsize=SLOW_QUEUE_MAX_SIZE)

ESTIMATED_TIME_PER_SOURCE = {
    'fast': 15,  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –≤ –±—ã—Å—Ç—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏
    'slow': 45,  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –≤ –º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
}

# --- –°–û–°–¢–û–Ø–ù–ò–Ø –í –ü–ê–ú–Ø–¢–ò ---
downloading_users = set()
user_last_search = TTLCache(maxsize=10000, ttl=SEARCH_COOLDOWN)
subscription_cache = TTLCache(maxsize=5000, ttl=300)


async def check_subscription(bot: Bot, user_id: int, channel_id: str) -> bool:
    if not channel_id: return True
    cache_key = f"{user_id}:{channel_id}"
    if cache_key in subscription_cache: return subscription_cache[cache_key]
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        is_subscribed = member.status in ['member', 'administrator', 'creator']
        subscription_cache[cache_key] = is_subscribed
        return is_subscribed
    except TelegramBadRequest:
        subscription_cache[cache_key] = False
        return False
    except Exception:
        return False

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π >>>
async def check_all_limits(bot: Bot, user_id: int, source: str) -> Tuple[bool, str, int, bool]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ª–∏–º–∏—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º)
    """
    main_sub_task = asyncio.create_task(check_subscription(bot, user_id, CHANNEL_ID_1))
    premium_sub_task = asyncio.create_task(check_subscription(bot, user_id, CHANNEL_ID_2))
    downloads_task = asyncio.create_task(get_user_daily_downloads(user_id))
    
    is_subscribed_main = await main_sub_task
    
    if not is_subscribed_main:
        message = (f"ü§®–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_ID_1}\n\n"
                   "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –µ—â–µ —Ä–∞–∑üîÑ")
        return False, message, 0, False

    if user_id in downloading_users:
        return False, "üëâüëà–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞...", 0, False

    is_subscribed_premium = await premium_sub_task
    downloads_today = await downloads_task
    
    current_limit = PREMIUM_DOWNLOAD_LIMIT if is_subscribed_premium else BASE_DOWNLOAD_LIMIT
    
    if downloads_today >= current_limit:
        message = (f"üíÄ–¢—ã –¥–æ—Å—Ç–∏–≥ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ {current_limit} —Ç—Ä–µ–∫–æ–≤. –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 24 —á–∞—Å–∞...")
        if not is_subscribed_premium and CHANNEL_ID_2:
            message += f"\n\n‚ú®–ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –¥–æ {PREMIUM_DOWNLOAD_LIMIT} —Ç—Ä–µ–∫–æ–≤, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞: {CHANNEL_ID_2}"
        return False, message, 0, is_subscribed_premium

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–π–¥–µ—Ç –∑–∞–¥–∞—á–∞
    target_queue = slow_queue if source == 'yandex' else fast_queue
    queue_type = 'slow' if source == 'yandex' else 'fast'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å
    if target_queue.full():
        return False, "üò•–°–µ—Ä–≤–µ—Ä —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", 0, is_subscribed_premium

    queue_position = target_queue.qsize() + 1
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    est_wait_seconds = queue_position * ESTIMATED_TIME_PER_SOURCE[queue_type]
    est_wait_min = int(est_wait_seconds // 60)
    
    wait_message = ""
    if est_wait_min > 0:
        wait_message = f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: ~{est_wait_min} –º–∏–Ω."

    premium_status_msg = " (VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚ú®)" if is_subscribed_premium else ""
    
    message = (f"‚úÖ–¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å{premium_status_msg}.\n"
               f"–ü–æ–∑–∏—Ü–∏—è: {queue_position}. {wait_message}")
               
    return True, message, queue_position, is_subscribed_premium

def check_search_rate_limit(user_id: int) -> Optional[str]:
    if user_id in user_last_search:
        remaining_time = SEARCH_COOLDOWN - (time.time() - user_last_search[user_id])
        return f"–¢—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –∑–∞–ø—Ä–æ—Å—ãüò§. –ü–æ–¥–æ–∂–¥–∏ {int(remaining_time)} —Å–µ–∫."
    user_last_search[user_id] = time.time()
    return None

def is_duration_valid(duration: int) -> bool:
    return 0 < duration <= MAX_DURATION_SECONDS

async def download_worker(bot: Bot, queue: asyncio.PriorityQueue, worker_id: str):
    print(f"üîß–í–æ—Ä–∫–µ—Ä —Å–∫–∞—á–∏–≤–∞–Ω–∏–π #{worker_id} –∑–∞–ø—É—â–µ–Ω...")
    
    PROXY_URL = os.getenv('PROXY_URL')
    if not PROXY_URL:
        print("CRITICAL ERROR: PROXY_URL is not set in .env file! Bot will not work.")
        return

    while True:
        try:
            _priority, _timestamp, (call, source, track_id) = await queue.get()
            user_id = call.from_user.id
            print(f"[Worker {worker_id}] Processing {track_id} ({source}) for {user_id}")

            await call.message.edit_text("üöÄ –ì–æ—Ç–æ–≤–ª—é —Å—Å—ã–ª–∫—É...")

            info = None
            audio_source = None 
            full_title = ""
            file_name = "audio.mp3"

            # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –î–õ–Ø SOUNDCLOUD >>>
            if source == 'soundcloud':
                # track_id –¥–ª—è soundcloud - —ç—Ç–æ –∏ –µ—Å—Ç—å URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                info = await get_soundcloud_info(track_id) 
                if info:
                    full_title = f"{info.get('artist', 'Unknown Artist')} - {info.get('title', 'Unknown Title')}"
                    
                    # –ü–æ–ª—É—á–∞–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    webpage_url = info['webpage_url']
                    extension = info.get('ext', 'mp3')
                    
                    # –°–æ–∑–¥–∞–µ–º payload: "URL_—Å—Ç—Ä–∞–Ω–∏—Ü—ã|—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"
                    payload_to_encode = f"{webpage_url}|{extension}"
                    
                    # –ö–æ–¥–∏—Ä—É–µ–º payload –≤ base64 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ URL
                    encoded_payload = base64.urlsafe_b64encode(payload_to_encode.encode()).decode()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ù–ê–® –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
                    proxy_link = f"{PROXY_URL.rstrip('/')}/stream/{encoded_payload}"
                    
                    # –ì–æ—Ç–æ–≤–∏–º –∏–º—è —Ñ–∞–π–ª–∞. –≠—Ç–æ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –≤–∞–∂–Ω–æ –¥–ª—è Telegram.
                    file_name = f"{sanitize_filename(full_title)}.{extension}"
                    
                    # –°–æ–∑–¥–∞–µ–º URLInputFile —Å proxy_link –∏ –ü–†–ê–í–ò–õ–¨–ù–´–ú –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
                    audio_source = URLInputFile(proxy_link, filename=file_name)
                    print(f"[Worker {worker_id}] Generated proxy link for SoundCloud: {file_name}")
                else:
                    await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ —Å SoundCloud.")
                    continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ –≤ –æ—á–µ—Ä–µ–¥–∏

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (yandex, saavn, yt) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            else:
                if source == 'yandex': info = await download_track_yandex(track_id)
                elif source == 'saavn': info = await download_track_saavn(track_id)
                else: info = await download_track_optimized(track_id)

                if not info:
                    await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                    continue

                if 'audio_bytes' in info:
                    full_title = f"{info.get('artist', 'Unknown Artist')} - {info.get('title', 'Unknown Title')}"
                    file_extension = info.get('extension', 'm4a')
                    file_name = f"{sanitize_filename(full_title)}.{file_extension}"
                    audio_source = BufferedInputFile(info['audio_bytes'], filename=file_name)

            if not audio_source:
                await call.message.edit_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
                continue

            # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞)
            
            title = info.get('title', 'Unknown Title')
            artist = info.get('artist', 'Unknown Artist')
            duration = info.get('duration')
            
            thumbnail = None
            if info.get('thumbnail_url'):
                thumbnail = URLInputFile(info.get('thumbnail_url'))
            elif info.get('thumbnail_bytes'):
                thumbnail = BufferedInputFile(info.get('thumbnail_bytes'), 'thumb.jpg')

            source_icons = {'yandex': 'üíõ', 'saavn': 'üíõ', 'soundcloud': '‚òÅÔ∏è', 'yt': 'üìÆ'}
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º full_title, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Ä–∞–Ω–µ–µ
            caption = f"{source_icons.get(source, 'üéß')} `{full_title}`"
            
            await call.message.edit_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
            
            await bot.send_audio(
                chat_id=user_id,
                audio=audio_source, # audio_source —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç filename
                caption=caption,
                parse_mode="Markdown",
                title=title,
                performer=artist,
                duration=int(duration) if duration else None,
                thumbnail=thumbnail
            )
            await call.message.delete()
            await save_user_track(user_id, f"{source}_{track_id}", info)
            print(f"[Worker {worker_id}] Success: Sent {full_title} from {source}")

        except Exception as e:
            print(f"[Worker {worker_id}] Critical error in worker: {e}")
            traceback.print_exc()
            if 'call' in locals():
                try:
                    await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
                except:
                    pass
        finally:
            if 'user_id' in locals() and user_id in downloading_users:
                downloading_users.remove(user_id)
            queue.task_done()

async def start_periodic_db_cleanup():
    while True:
        await asyncio.sleep(3600)
        await cleanup_expired_cache()
