import logging
from aiogram import Router, types
from aiogram.types import LabeledPrice
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext  
from aiogram.filters import Command
from .states import DonationStates

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda c: c.data == "donate")
async def donate_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å'."""
    try:
        await callback.answer()
        # –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–Ω–∞—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if callback.message.chat.type != "private":
            await callback.message.answer(
                "üëÄ–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
                parse_mode="HTML"
            )
            return
            
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="5 ‚≠ê", callback_data="donate_stars_5"))
        builder.add(types.InlineKeyboardButton(text="25 ‚≠ê", callback_data="donate_stars_25"))
        builder.add(types.InlineKeyboardButton(text="50 ‚≠ê", callback_data="donate_stars_50"))
        builder.add(types.InlineKeyboardButton(text="100 ‚≠ê", callback_data="donate_stars_100"))
        builder.row(types.InlineKeyboardButton(text="–°–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚≠ê", callback_data="donate_stars_custom"))
        
        await callback.message.answer(
            "üåü<b>–ü–û–î–î–ï–†–ñ–ê–¢–¨ –†–ê–ó–í–ò–¢–ò–ï –ë–û–¢–ê</b>\n\n"
            "üí≥<b>–ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É</b>\n\n"
            "‚Äî <b>–¢-–ë–∞–Ω–∫</b> 5536914008008074\n"
            "‚Äî <b>–°–±–µ—Ä</b> 4276671200918792\n"
            "‚Äî <b>–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫</b> 2204310110203471\n"
            "‚Äî <b>–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫</b> 4249170367470691\n\n"
            "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <b>–ò–ª—å—è –°–∞–Ω—å–∫–æ–≤</b>\n"
            "<blockquote>–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å, –ø–æ–¥–∞—Ä–∏–≤ <b>–ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –∑–≤–µ–∑–¥—ã</b> –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–≤ <b>–∑–≤–µ–∑–¥–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏</b> –ø–æ–¥ <b>–ª—é–±—ã–º</b> –ø–æ—Å—Ç–æ–º –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @chedmemes!</blockquote>\n\n"
            "‚≠êÔ∏è<b>–ó–≤–µ–∑–¥–∞–º–∏</b>\n\n",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞", DonationStates.waiting_for_amount)
@router.message(Command("cancel"), DonationStates.waiting_for_amount)
async def cancel_donation_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è.
    –õ–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É /cancel –∏–ª–∏ —Ç–µ–∫—Å—Ç "–æ—Ç–º–µ–Ω–∞", —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æüëå",
        reply_markup=types.ReplyKeyboardRemove()
    )

@router.callback_query(lambda c: c.data.startswith("donate_stars_"))
async def donate_stars_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è."""
    try:
        await callback.answer()
        data = callback.data.split("_")

        if data[2] == "custom":
            kb = types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await callback.message.answer(
                "‚ú®–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å (–æ—Ç 1 –¥–æ 10000)\n\n"
                "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏ /cancel –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá",
                reply_markup=kb 
            )
            await state.set_state(DonationStates.waiting_for_amount)
            return

        amount = int(data[2])
        prices = [LabeledPrice(label="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞", amount=amount)]
        await callback.message.answer_invoice(
            title="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞",
            description="–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –ø–æ–¥–¥–µ—Ä–∂–∫—Éüíñ",
            payload="donate_payload",
            provider_token="", # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            currency="XTR",
            prices=prices,
            start_parameter="donate"
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ invoice: {e}")
        await callback.message.answer("üö´–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞")


@router.message(DonationStates.waiting_for_amount, F.text.isdigit())
async def custom_stars_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥, –∫–æ–≥–¥–∞ –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è."""
    try:
        amount = int(message.text)
        if not (1 <= amount <= 10000):
            await message.answer("‚ùå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000")
            return

        # 4. –î–û–ë–ê–í–õ–Ø–ï–ú –£–î–ê–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ì–û –í–í–û–î–ê
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞—é —Å—á–µ—Ç...", reply_markup=types.ReplyKeyboardRemove())

        prices = [LabeledPrice(label="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞", amount=amount)]
        await message.answer_invoice(
            title="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞",
            description="–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –ø–æ–¥–¥–µ—Ä–∂–∫—Éüíñ",
            payload="donate_payload",
            provider_token="", # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
            currency="XTR",
            prices=prices,
            start_parameter="donate"
        )
        # –û–ß–ï–ù–¨ –í–ê–ñ–ù–û: –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await state.clear()

    except (ValueError, TypeError):
         await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...")
         return # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥: {e}")
        await message.answer("üö´–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞")
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
        await state.clear()


@router.message(DonationStates.waiting_for_amount)
async def incorrect_custom_stars_input(message: types.Message):
    """–õ–æ–≤–∏—Ç –ª—é–±–æ–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ (–Ω–µ —Ü–∏—Ñ—Ä—ã) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–Ω–∞—Ç–∞."""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—Å–∞–≤ /cancelüò•")

@router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: types.PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π."""
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment_handler(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É."""
    await message.answer("üéâ–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –ø–æ–¥–¥–µ—Ä–∂–∫—É! –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –±–æ—Ç—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ!")